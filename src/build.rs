use std::fs;

use log::info;

use crate::config::Config;
use crate::utils;

pub fn build_bundle(c: Config) -> Result<(), String> {
	let app_dir = temp_dir::TempDir::new().unwrap();
	let app_dir = app_dir.path();

	info!("AppDir: {}", app_dir.to_str().unwrap());

	// Generate app.desktop
	utils::touch(&app_dir.join("app.desktop").to_string_lossy().to_string())?;

	let desktop_file = format!(
"[Desktop Entry]
Name={name}
Exec={cmd}
Icon=icon
Type=Application
Categories={categories}",
			name = c.name,
			cmd = c.cmd,
			categories = c.categories);
	let result = fs::write(app_dir.join("app.desktop").to_str().unwrap(), &desktop_file);
	info!("{}", &desktop_file);
	if result.is_err() {
		return Err(result.unwrap_err().to_string());
	}

	// Copy icon
	let ext = c.icon.split(".").last().unwrap();
	utils::cp(&c.icon, &app_dir.join(format!("icon.{}", ext)).to_string_lossy().to_string())?;

	// Generate AppRun
	utils::touch(&app_dir.join("AppRun").to_string_lossy().to_string())?;

	let mut args = String::new(); // Verify there is a space at the end of every push to this!
	if let Some(value) = c.run.custom_root {
		if value {
			args.push_str("--overlay-src / ");
		}
	}
	args.push_str("--overlay-src rootfs ");

	args.push_str("--tmp-overlay / ");

	let result = fs::write(app_dir.join("AppRun").to_str().unwrap(), format!(
		"#!/bin/bash
		# AppRun
		# This script is generated by app_bundle_creator by FigSystems
		# https://github.com/FigSystems/app_bundle_creator

		set -eu

		bwrap {args} {cmd}",
		cmd = c.cmd,
		args = args));
	if result.is_err() {
		return Err(result.unwrap_err().to_string());
	}

	utils::cp(&c.build.root, &app_dir.join("rootfs").to_string_lossy().to_string())?;
	utils::cmd(&format!(
		"ARCH={arch} ./appimagetool-x86_64 {appdir}",
		arch = c.build.arch,
		appdir = app_dir.to_str().unwrap()
	))?;

	Ok(())
}